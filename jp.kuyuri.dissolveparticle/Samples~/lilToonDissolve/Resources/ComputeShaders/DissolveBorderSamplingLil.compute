#pragma kernel Initialize
#pragma kernel DissolveBorderSamplingLil

#include "Packages/jp.kuyuri.dissolveparticle/Runtime/Resources/ComputeShaders/MeshSamplingHeader.hlsl"

struct DissolveSamplingPoint
{
    float3 position;
    float3 normal;
    float3 velocity;
    float2 uv;
    uint meshIndex;
    float enabled;
};

struct DissolveMeshData
{
    int isDissolve;
    float3 dissolvePosition;
    float dissolveRange;
    float dissolveBlur;
};

uint SourceCount;

Texture2D DissolveNoise;
SamplerState sampler_DissolveNoise;
float2 DissolveNoiseTiling;
float2 DissolveNoiseOffset;
float DissolveNoiseStrength;
float DissolveEnabled;

StructuredBuffer<MeshSamplingPoint> MeshSamplingBuffer;
StructuredBuffer<DissolveMeshData> DissolveMeshDataBuffer;
RWStructuredBuffer<DissolveSamplingPoint> DissolveBorderSamplingBuffer;

[numthreads(64, 1, 1)]
void Initialize(uint id : SV_DispatchThreadID)
{
    DissolveBorderSamplingBuffer[id].enabled = 0.0;
}

[numthreads(64, 1, 1)]
void DissolveBorderSamplingLil(uint id : SV_DispatchThreadID)
{
    MeshSamplingPoint mp = MeshSamplingBuffer[id];
    DissolveMeshData dm = DissolveMeshDataBuffer[mp.meshIndex];
    const float signedDistance = distance(mp.positionOS, dm.dissolvePosition) - dm.dissolveRange;
    if(dm.isDissolve && signedDistance < dm.dissolveBlur && signedDistance > 0)
    {
        DissolveSamplingPoint dp;
        dp.enabled = 1.0;
        dp.position = mp.position;
        dp.normal = mp.normal;
        dp.velocity = mp.velocity;
        dp.uv = mp.uv;
        dp.meshIndex = mp.meshIndex;

        DissolveBorderSamplingBuffer[id] = dp;
    }
    else
    {
        DissolveBorderSamplingBuffer[id] = (DissolveSamplingPoint)0;
        DissolveBorderSamplingBuffer[id].enabled = 0.0;
    }
}
